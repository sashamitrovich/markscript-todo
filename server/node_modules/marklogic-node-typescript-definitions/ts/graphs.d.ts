declare module 'marklogic' {
  namespace graphs {
      interface SparqlValue {
        type: string
        value: string
      }

      interface SparqlBinding {
        [varName: string]: SparqlValue
      }

      interface SparqlResult {
        bindings: SparqlBinding[]
      }

      interface SparqlQueryResult {
        results: SparqlResult
      }


    interface Graphs {
      /**
       * Reads the triples for a graph from the server in the specified format.
       * @method graphs#read
       * @param {string} [uri] - a graph name, which can be ommitted for the default graph
       * @param {string} contentType - the format for the graph such as application/n-quads,
       * application/n-triples, application/rdf+json, application/rdf+xml, text/n3, text/turtle,
       * or application/vnd.marklogic.triples+xml
       * @returns {ResultProvider} an object whose stream() function returns a read stream
       * that receives the triples for the graph in the requested format
       */
      read(contentType:string, uri?:string):ResultProvider<any>

      /**
       * Creates or replaces the triples for the specified graph.
       * @method graphs#write
       * @param {string} [uri] - a graph name, which can be ommitted for the default graph
       * @param {string} contentType - the format for the graph such as application/n-quads,
       * application/n-triples, application/rdf+json, application/rdf+xml, text/n3, text/turtle,
       * or application/vnd.marklogic.triples+xml
       * @param {boolean} [repair] - whether to attempt to repair errors in the graph data
       * @param {object|string|Buffer|ReadableStream} [data] - the graph data in the specified format
       */
      write(contentType:string, uri?:string, repair?:boolean, data?:Object|string|Buffer|NodeJS.ReadableStream):void

      /**
       * Adds the triples for the specified graph.
       * @method graphs#write
       * @param {string} [uri] - a graph name, which can be ommitted for the default graph
       * @param {string} contentType - the format for the graph such as application/n-quads,
       * application/n-triples, application/rdf+json, application/rdf+xml, text/n3, text/turtle,
       * or application/vnd.marklogic.triples+xml
       * @param {boolean} [repair] - whether to attempt to repair errors in the graph data
       * @param {object|string|Buffer|ReadableStream} [data] - the graph data in the specified format
       */
      merge(contentType:string, uri?:string, repair?:boolean, data?:Object|string|Buffer|NodeJS.ReadableStream):void

      /**
       * Creates or replaces the triples for the specified graph in incremental chunks with
       * a stream; takes the following parameters (but not a data parameter).
       * @method graphs#createWriteStream
       * @param {string} [uri] - a graph name, which can be ommitted for the default graph
       * @param {string} contentType - the format for the graph such as application/n-quads,
       * application/n-triples, application/rdf+json, application/rdf+xml, text/n3, text/turtle,
       * or application/vnd.marklogic.triples+xml
       * @param {boolean} [repair] - whether to attempt to repair errors in the graph data
       * @returns {WritableStream} a stream for writing the triples
       */
      createWriteStream(contentType:string, uri?:string, repair?:boolean):NodeJS.WritableStream

      /**
       * Adds the triples for the specified graph in incremental chunks with
       * a stream; takes the following parameters (but not a data parameter).
       * @method graphs#createMergeStream
       * @param {string} [uri] - a graph name, which can be omitted for the default graph
       * @param {string} contentType - the format for the graph such as application/n-quads,
       * application/n-triples, application/rdf+json, application/rdf+xml, text/n3, text/turtle,
       * or application/vnd.marklogic.triples+xml
       * @param {boolean} [repair] - whether to attempt to repair errors in the graph data
       * @returns {WritableStream} a stream for writing the triples
       */
      createMergeStream(contentType:string, uri?:string, repair?:boolean):NodeJS.WritableStream

      /**
       * Removes the specified graph.
       * @method graphs#remove
       * @param {string} [uri] - a graph name, which can be omitted for the default graph
       */
      remove(uri?:string):void

      /**
       * Check whether the specified graph exists.
       * @method graphs#probe
       * @param {string} [uri] - a graph name, which can be omitted for the default graph
       * @returns {ResultProvider} an object whose result() function takes a success callback
       * that receives an object with an exists boolean for the graph.
       */
      probe(uri?:string):ResultProvider<boolean>

      /**
       * Lists the graphs stored on the server.
       * @method graphs#list
       * @param {string} contentType - the format for the list of graphs
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the list of graphs stored
       * on the server
       */
      list(contentType:string):ResultProvider<string[]>

      /**
       * Executes a SPARQL query against the triples for the graphs; takes a
       * configuration object with the following named parameters or, as a shortcut,
       * a contentType string, any number of default graph URIs, and a SPARQL query.
       * @method graphs#sparql
       * @param {string} contentType - the format for the query response
       * @param {string|string[]} [defaultGraphs] - the default graphs for the SPARQL query
       * @param {string|string[]} [namedGraphs] - the named graphs for the SPARQL query
       * @param {string|ReadableStream} query - the SPARQL query
       * @returns {ResultProvider} an object whose stream() function returns a read stream
       * that receives the query response
       */
      sparql(contentType:string, defaultGraphs?:string|string[], namedGraphs?:string|string[], query?:string|NodeJS.ReadableStream):ResultProvider<SparqlQueryResult>
    }
  }
}
