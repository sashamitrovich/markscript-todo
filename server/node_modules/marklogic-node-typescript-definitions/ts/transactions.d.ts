declare module 'marklogic' {
  namespace transactions {
    interface Transaction {
      /**
       * Creates a multi-statement transaction, providing a transactionId or
       * Transaction object to pass to write, read, and remove functions
       * before calling the {@link transactions#commit} or {@link transactions#rollback}
       * function to finish the transaction.
       * @method transactions#open
       * @param {string}  [transactionName] - a label to assign to the transaction
       * for easier recognition in reports
       * @param {number}  [timeLimit] - the maximum number of seconds that
       * the transaction should run before rolling back automatically
       * @param {boolean}  [withState] - whether to return a Transaction
       * object that can track the properties of the transaction
       * @returns {string|transactions.Transaction} either a string
       * transactionId (the default) or a Transaction object identifying
       * the multi-statement transaction; in the next major release,
       * the Transaction object will become the default and the string
       * transactionId will be deprecated.
       */
      open(transactionName:string, timeLimit?:number, withState?:boolean): string|Transaction

      /**
       * Creates a multi-statement transaction, providing a transactionId or
       * Transaction object to pass to write, read, and remove functions
       * before calling the {@link transactions#commit} or {@link transactions#rollback}
       * function to finish the transaction.
       * @method transactions#open
       * @param {string}  [transactionName] - a label to assign to the transaction
       * for easier recognition in reports
       * @param {number}  [timeLimit] - the maximum number of seconds that
       * the transaction should run before rolling back automatically
       * @param {boolean}  [withState] - whether to return a Transaction
       * object that can track the properties of the transaction
       * @returns {string|transactions.Transaction} either a string
       * transactionId (the default) or a Transaction object identifying
       * the multi-statement transaction; in the next major release,
       * the Transaction object will become the default and the string
       * transactionId will be deprecated.
       */
      open(args:{transactionName:string, timeLimit?:number, withState?:boolean}): string|Transaction

      /**
       * Reads the current state of a multi-statement transaction
       * created with the {@link transactions#open} function.
       * @method transactions#read
       * @param {string|transactions.Transaction} txid - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @returns {object} information about the transaction
       */
      read(txid:string|Transaction): {[key:string]:any}

      /**
       * Finishes a multi-statement transaction by applying the changes.
       * @method transactions#commit
       * @param {string|transactions.Transaction}  txid - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       */
      commit(txid:string|Transaction):void

      /**
       * Finishes a multi-statement transaction by reverting the changes.
       * @method transactions#rollback
       * @param {string|transactions.Transaction}  txid - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       */
      rollback(txid:string|Transaction):void
    }
  }
}
