declare module 'marklogic' {
  namespace resources {
    interface Resources {
      /**
       * Invokes the get() function in the resource service.
       * @method resources#get
       * @param {string} name - the name of the service
       * @param {object} [params] - an object in which each property has
       * a variable name as a key and a number, string, or boolean value
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @returns {ResultProvider} an object whose stream() function returns
       * a stream that receives the response
       */
      get<T>(args:{name:string, params?:{[name:string]:string|number|boolean}, txid?: string|transactions.Transaction}):ResultProvider<T>

      /**
       * Invokes the post() function in the resource service.
       * @method resources#post
       * @param {string} name - the name of the service
       * @param {object} [params] - an object in which each property has
       * a variable name as a key and a number, string, or boolean value
       * @param {string|object|Buffer|ReadableStream}  [documents] - any document
       * content to send to the server
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @returns {ResultProvider} an object whose stream() function returns
       * a stream that receives the response
       */
      post<T>(args:{name:string, params?:{[name:string]:string|number|boolean}, documents?:string|Object|Buffer|NodeJS.ReadableStream, txid?: string|transactions.Transaction}):ResultProvider<T>

      /**
       * Invokes the put() function in the resource service.
       * @method resources#put
       * @param {string} name - the name of the service
       * @param {object} [params] - an object in which each property has
       * a variable name as a key and a number, string, or boolean value
       * @param {string|object|Buffer|ReadableStream}  [documents] - any document
       * content to send to the server
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       */
      put<T>(args:{name:string, params?:{[name:string]:string|number|boolean}, documents?:string|Object|Buffer|NodeJS.ReadableStream, txid?: string|transactions.Transaction}):ResultProvider<T>

      /**
       * Invokes the delete() function in the resource service.
       * @method resources#remove
       * @param {string} name - the name of the service
       * @param {object} [params] - an object in which each property has
       * a variable name as a key and a number, string, or boolean value
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       */
      remove<T>(args:{name:string, params?:{[name:string]:string|number|boolean}, txid?: string|transactions.Transaction}):ResultProvider<T>
    }
  }
}
