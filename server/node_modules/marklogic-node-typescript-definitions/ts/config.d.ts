declare module 'marklogic' {
  namespace config {
    /**
     * Provides functions to maintain transform extension on the REST server
     * for the client. The client must have been created for a user with the
     * rest-admin role.
     * @namespace config.transforms
     */
    interface Transforms {
      /**
       * Reads the source for a transform installed on the server.
       * @method config.transforms#read
       * @param {string} name - the name of an installed transform
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the source code
       */
      read(name:string):ResultProvider<string>

      /**
       * Installs a transform on the server.
       * @method config.transforms#write
       * @param {string} name - the name of the transform
       * @param {string} format - a value from the xquery|xslt enumeration
       * @param {object|string} source - the source for the transform
       */
      write(name:string, format:string, source:Object|string):ResultProvider<void>

      /**
       * Installs a transform on the server.
       * @method config.transforms#write
       * @param {string} name - the name of the transform
       * @param {string} format - a value from the xquery|xslt enumeration
       * @param {object|string} source - the source for the transform
       */
      write(args:{name:string, format:string, source:Object|string}):ResultProvider<void>

      /**
       * Deletes a transform from the server.
       * @method config.transforms#remove
       * @param {string} name - the name of the transform
       */
      remove(name:string):ResultProvider<void>

      /**
       * Lists the transforms installed on the server.
       * @method config.transforms#list
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the list of transforms installed
       * on the server
       */
      list():ResultProvider<string>
    }

    /**
     * Provides functions to maintain resource service extensions on the REST server
     * for the client. The client must have been created for a user with the
     * rest-admin role.
     * @namespace config.resources
     */
    interface Resources {
      /**
       * Reads the source for a resource service installed on the server.
       * @method config.resources#read
       * @param {string} name - the name of an installed resource service
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the source code
       */
      read(name:string):ResultProvider<string|Object>

      /**
       * Installs a resource service on the server.
       * @method config.resources#write
       * @param {string} name - the name of the resource service
       * @param {string} format - a value from the javascript|xquery enumeration
       * @param {object|string} source - the source for the resource service
       */
      write(name: string, format:string, source:Object|string):ResultProvider<void>

      /**
       * Installs a resource service on the server.
       * @method config.resources#write
       * @param {string} name - the name of the resource service
       * @param {string} format - a value from the javascript|xquery enumeration
       * @param {object|string} source - the source for the resource service
       */
      write(args:{name: string, format:string, source:Object|string}):ResultProvider<void>

      /**
       * Deletes a resource service from the server.
       * @method config.resources#remove
       * @param {string} name - the name of the resource service
       */
      remove(name: string):ResultProvider<void>

      /**
       * Lists the resource services installed on the server.
       * @method config.resources#list
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the list of resource services installed
       * on the server
       */
      list():ResultProvider<string>
    }

    interface ExtLibs {
      /**
       * Reads a library resource installed on the server.
       * @method config.extlibs#read
       * @param {string} path - the location of an installed library resource
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the resource
       */
      read(path:string):ResultProvider<any>

      /**
       * Installs a library resource on the server.
       * @method config.extlibs#write
       * @param {string} path - the location for installing the library resource
       * @param {object[]} [permissions] - the permissions controlling which users can read, update, or
       * execute the library resource
       * @param {string} contentType - the mime type for the library resource
       * @param {object|string} source - the library resource
       */
      write(path:string, permissions?: Permissions[], contentType?:string, source?:Object|string):ResultProvider<void>

      /**
       * Installs a library resource on the server.
       * @method config.extlibs#write
       * @param {string} path - the location for installing the library resource
       * @param {object[]} [permissions] - the permissions controlling which users can read, update, or
       * execute the library resource
       * @param {string} contentType - the mime type for the library resource
       * @param {object|string} source - the library resource
       */
      write(args:{path:string, permissions?: Permissions[], contentType?:string, source?:Object|string}):ResultProvider<void>

      /**
       * Deletes a library resource from the server.
       * @method config.extlibs#remove
       * @param {string} path - the location of the library resource
       */
      remove(path:string):ResultProvider<void>

      /**
       * Lists the library resources installed under the directory on the server.
       * @method config.extlibs#list
       * @param {string} [directory] - a directory containing library resources;
       * by default, all library resources installed on the server are returned
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the list of library resources installed
       * in the directory
       */
      list(directory?:string):ResultProvider<any[]>
    }


    /**
     * Provides functions to modify the properties of the REST server for
     * the client. The client must have been created for a user with the
     * rest-admin role.
     * @namespace config.serverprops
     */
    interface RESTServerProperties {
      /**
       * Reads the configuration properties for the server.
       * @method config.serverprops#read
       * @returns {object} the properties
       */
      read():ResultProvider<Object>

      /**
       * Modifies the configuration properties for the server.
       * @method config.serverprops#write
       * @param {object} properties - the modified properties
       */
      write(properties:Object):ResultProvider<void>
    }
  }
}
