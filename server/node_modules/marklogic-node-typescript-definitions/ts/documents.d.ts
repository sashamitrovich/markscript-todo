declare module 'marklogic' {
  namespace documents {
    interface FacetValue<F> {
      name: string
      count: number
      value: F
    }

    interface FacetCategories<F> {
      type: string,
      facetValues: FacetValue<F>[]
    }

    interface Facets<F> {
      categories: FacetCategories<F>
    }

    interface Result {
      index: number
      uri: string
      path: string
      score: number
      confidence: number
      fitness: number
      href: string
      mimetype: string
      format: string
      matches: Match[]
    }

    interface HighlightedText {
      highlight: string
    }

    interface Match {
      path: string
      'match-text': (string|HighlightedText)[]
    }

    interface QueryResult<F> extends DocumentDescriptor {
      'snippet-format': string,
      total: number,
      start: number,
      'page-length': number,
      results: Result[],
      facets: Facets<F>
      qText: string
      metrics: Metrics
    }

    interface Metrics {
      // TODO
    }

    interface FetchedDocument extends DocumentDescriptor {
      category: string
      format: string
      contentType: string
      contentLength: string
      // TODO - Add metadata
    }

    /**
     * Provides a description of a document to write to the server, after reading
     * from the server, or for another document operation.  The descriptor may have
     * more or fewer properties depending on the operation.
     * @typedef {object} documents.DocumentDescriptor
     * @property {string} uri - the identifier for the document in the database
     * @property {string} contentType - the type of content, e.g.: application/json
     * @property {object|string|Buffer|ReadableStream} [content] - the content
     * of the document; when writing a ReadableStream for the content, first pause
     * the stream
     * @property {string[]} [collections] - the collections to which the document belongs
     * @property {object[]} [permissions] - the permissions controlling which users can read or
     * write the document
     * @property {object[]} [properties] - additional properties of the document
     * @property {number} [quality] - a weight to increase or decrease the rank of the document
     * @property {number} [versionId] - an identifier for the currently stored version of the
     * document
     */
    interface DocumentDescriptor {
      uri: string
      contentType?: string
      content?: Object|string|Buffer|NodeJS.ReadableStream
      collections?: string[]
      permissions?: Object[]
      properties?: Object[]
      quality?: number
      versionId?: number
    }

    /**
     * Defines a query in the structure accepted by the REST API.
     * @typedef {object} documents.CombinedQueryDefinition
     * @property {object} search - a combined query, which can have properties
     * for a structured query, a string query, and query options
     * @property {documents.categories|documents.categories[]}  [categories] - the categories
     * of information to retrieve for the result documents
     * @property {string} [optionsName] - query options installed on the REST server
     * to merge with any query options provided in the combined query; provided options
     * take precedence over installed options
     * @property {number} [pageStart] - the position of the first document in the returned
     * page of result documents (also known as the result slice)
     * @property {number} [pageLength] - the number of documents in the returned page
     * of result documents
     * @param {string|transactions.Transaction}  [txid] - a string
     * transaction id or Transaction object identifying an open
     * multi-statement transaction to include modified documents
     * in the results if the documents match the criteria
     * @property {string} [view] - a value from the enumeration
     * all|facets|metadata|none|results|uris controlling whether to generate some or all
     * of a search response summarizing the search response in addition to the result
     * documents; the default is 'none' to return only the result documents
     */
    interface CombinedQueryDefinition {
      search:any
      categories?:string|string[]
      optionsName?:string
      pageStart?:number
      pageLength?:number
      txid?:string|transactions.Transaction
      view?:string
    }

    interface Documents {
      /**
       * Probes whether a document exists; takes a configuration
       * object with the following named parameters or, as a shortcut,
       * a uri string.
       * @method documents#probe
       * @param {string}  uri - the uri for the database document
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#probeResult} success callback.
       */
      probe(uri:string, txid?:string|transactions.Transaction):ResultProvider<DocumentDescriptor>

      /**
       * Probes whether a document exists; takes a configuration
       * object with the following named parameters or, as a shortcut,
       * a uri string.
       * @method documents#probe
       * @param {string}  uri - the uri for the database document
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#probeResult} success callback.
       */
      probe(args:{uri:string, txid?:string|transactions.Transaction}):ResultProvider<DocumentDescriptor>

      /**
       * Reads one or more documents; takes a configuration object with
       * the following named parameters or, as a shortcut, one or more
       * uri strings or an array of uri strings.
       * @method documents#read
       * @param {string|string[]}  uris - the uri string or an array of uri strings
       * for the database documents
       * @param {documents.categories|documents.categories[]}  [categories] - the categories of information
       * to retrieve for the documents
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @param {string}  [transform] - the name of a transform extension to apply
       * to each document; the transform must have been installed using
       * the {@link transforms#write} function.
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#resultList} success callback.
       */
      read(uris:string|string[], categories?:string|string[], txid?:string|transactions.Transaction, transform?:string):ResultProvider<DocumentDescriptor[]>

      /**
       * Reads one or more documents; takes a configuration object with
       * the following named parameters or, as a shortcut, one or more
       * uri strings or an array of uri strings.
       * @method documents#read
       * @param {string|string[]}  uris - the uri string or an array of uri strings
       * for the database documents
       * @param {documents.categories|documents.categories[]}  [categories] - the categories of information
       * to retrieve for the documents
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @param {string}  [transform] - the name of a transform extension to apply
       * to each document; the transform must have been installed using
       * the {@link transforms#write} function.
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#resultList} success callback.
       */
      read(args:{uris:string|string[], categories?:string|string[], txid?:string|transactions.Transaction, transform?:string}):ResultProvider<DocumentDescriptor[]>

      /**
       * Writes a large document (typically a binary) in incremental chunks with
       * a stream; takes a {@link documents.DocumentDescriptor} object with the
       * following properties (but not a content property).
       * @method documents#createWriteStream
       * @param {string} uri - the identifier for the document to write to the database
       * @param {string[]} [collections] - the collections to which the document should belong
       * @param {object[]} [permissions] - the permissions controlling which users can read or
       * write the document
       * @param {object[]} [properties] - additional properties of the document
       * @param {number} [quality] - a weight to increase or decrease the rank of the document
       * @param {number} [versionId] - an identifier for the currently stored version of the
       * document (when enforcing optimistic locking)
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @param {string}  [transform] - the name of a transform extension to apply
       * to the document; the transform must have been installed using
       * the {@link transforms#write} function.
       * @returns {WritableStream} a stream for writing the database document; the
       * stream object also has a result() function that takes
       * a {@link documents#writeResult} success callback.
       */
      createWriteStream(document:{uri:string, collections?:string[], permissions?:Permissions[], properties?:{[key:string]:string}, quality?:number, versionId?:number, txid?:string|transactions.Transaction, transform?:string}):NodeJS.WritableStream

      /**
       * Writes one or more documents; takes a configuration object with
       * the following named parameters or, as a shortcut, a document descriptor.
       * @method documents#write
       * @param {DocumentDescriptor|DocumentDescriptor[]} documents - one descriptor
       * or an array of document descriptors to write
       * @param {documents.categories|documents.categories[]}  [categories] - the categories of information
       * to write for the documents
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @param {string}  [transform] - the name of a transform extension to apply
       * to each document; the transform must have been installed using
       * the {@link transforms#write} function.
       * @param {string}  [forestName] - the name of a forest in which to write
       * the documents.
       * @param {string} [temporalCollection] - the name of the temporal collection;
       * use only when writing temporal documents that have the JSON properties or XML elements
       * specifying the valid and system start and end times as defined by the valid and
       * system axis for the temporal collection
       * @param {string|Date} [systemTime] - a datetime to use as the system start time
       * instead of the current time of the database server; can only be supplied
       * if the temporalCollection parameter is also supplied
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#writeResult} success callback.
       */
      write(documents:DocumentDescriptor|DocumentDescriptor[], categories?:string|string[], txid?:string|transactions.Transaction, transform?:string, forestName?:string, temporalCollection?:string, systemTime?:string|Date):ResultProvider<{documents:DocumentDescriptor[]}>

      /**
       * Removes one or more database documents; takes a configuration
       * object with the following named parameters or, as a shortcut, one or more
       * uri strings or an array of uri strings.
       * @method documents#remove
       * @param {string|string[]}  uris - the uri string or an array of uri strings
       * identifying the database documents
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @param {string} [temporalCollection] - the name of the temporal collection;
       * use only when deleting a document created as a temporal document; sets the
       * system end time to record when the document was no longer active
       * @param {string|Date} [systemTime] - a datetime to use as the system end time
       * instead of the current time of the database server; can only be supplied
       * if the temporalCollection parameter is also supplied
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#removeResult} success callback.
       */
      remove(uris:string|string[], txid?:string|transactions.Transaction, temporalCollection?:string, systemTime?:string|Date):ResultProvider<DocumentDescriptor[]>

      /**
       * Removes all documents in a collection, directory, or database;
       * takes a configuration object with the following named
       * parameters or no parameters to delete all documents. The user must
       * have the rest-admin role to to delete all documents and the rest-writer
       * role otherwise.
       * @method documents#removeAll
       * @param {string}  [collection] - the collection whose documents should be
       * deleted
       * @param {string}  [directory] - a directory whose documents should be
       * deleted
       * @returns {ResultProvider} an object with a result() function taking
       * success and failure callbacks.
       */
      removeAll(params:{collection?:string, directory?:string}):ResultProvider<DocumentDescriptor[]>

      /**
       * Executes a query built by a {@link queryBuilder} to match one or more
       * documents.
       * @method documents#query
       * @param {object}  query - a query built by a {@link queryBuilder} or
       * a {@link documents.CombinedQueryDefinition}
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#resultList} success callback.
       */
      query(query:query.Query|CombinedQueryDefinition):ResultProvider<DocumentDescriptor[]>

      /**
       * Applies changes to a document; takes a configuration object with
       * the following named parameters or, as a shortcut, a uri string and
       * one or more patch operations produced by a {@link patchBuilder}.
       * @method documents#patch
       * @param {string}  uri - the uri
       * @param {patchOperation|patchOperation[]} operations - delete, insert,
       * or replace operations produced by a {@link patchBuilder} to apply
       * to the document.
       * @param {documents.categories|documents.categories[]}  [categories] - the
       * categories of information modified by the patch (typically 'content')
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction to patch the document as part
       * of a larger multi-statement transaction
       * @param {number} [versionId] - an identifier for the currently stored version
       * of the document (when enforcing optimistic locking)
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#patchResult} success callback.
       */
      patch(uri:string, operations:patch.PatchOperation|patch.PatchOperation[], categories?:string|string[], txid?:string|transactions.Transaction, versionId?:number):ResultProvider<DocumentDescriptor>

      /**
       * Applies changes to a document; takes a configuration object with
       * the following named parameters or, as a shortcut, a uri string and
       * one or more patch operations produced by a {@link patchBuilder}.
       * @method documents#patch
       * @param {string}  uri - the uri
       * @param {patchOperation|patchOperation[]} operations - delete, insert,
       * or replace operations produced by a {@link patchBuilder} to apply
       * to the document.
       * @param {documents.categories|documents.categories[]}  [categories] - the
       * categories of information modified by the patch (typically 'content')
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction to patch the document as part
       * of a larger multi-statement transaction
       * @param {number} [versionId] - an identifier for the currently stored version
       * of the document (when enforcing optimistic locking)
       * @returns {ResultProvider} an object whose result() function takes
       * a {@link documents#patchResult} success callback.
       */
      patch(args:{uri:string, operations:patch.PatchOperation|patch.PatchOperation[], categories?:string|string[], txid?:string|transactions.Transaction, versionId?:number}):ResultProvider<DocumentDescriptor>

      /**
       * For a partial textual value intended for a string search, looks up completions
       * that match documents in the database. The textual value may be prefixed
       * with the constraint name for a string search binding or facet. The textual value
       * may also be an unqualified word or phrase for the default binding.
       * You may pass a configuration object with the following named parameters or,
       * as a shortcut, the partial textual search, the query, and optionally bindings.
       * @method documents#suggest
       * @param {string} partial - the partial search string to complete
       * @param {object} query - a query built by a {@link queryBuilder} or
       * a {@link documents.CombinedQueryDefinition} that defines bindings in
       * the where and calculate clause and that qualifies the documents supplying
       * the completions for the partial search string
       * @param {queryBuilder.SuggestBindings} [bindings] - bindings
       * returned by the {@link queryBuilder#suggestBindings} function that
       * override the query bindings to retrieve completions from a different index
       * @param {number} [limit] - the number of completions to return
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives an array with the candidate completion
       * strings.
       */
      suggest(partial:string, query:query.Query, bindings?:query.SuggestBindings, limit?:number):ResultProvider<string[]>

      /**
       * For a partial textual value intended for a string search, looks up completions
       * that match documents in the database. The textual value may be prefixed
       * with the constraint name for a string search binding or facet. The textual value
       * may also be an unqualified word or phrase for the default binding.
       * You may pass a configuration object with the following named parameters or,
       * as a shortcut, the partial textual search, the query, and optionally bindings.
       * @method documents#suggest
       * @param {string} partial - the partial search string to complete
       * @param {object} query - a query built by a {@link queryBuilder} or
       * a {@link documents.CombinedQueryDefinition} that defines bindings in
       * the where and calculate clause and that qualifies the documents supplying
       * the completions for the partial search string
       * @param {queryBuilder.SuggestBindings} [bindings] - bindings
       * returned by the {@link queryBuilder#suggestBindings} function that
       * override the query bindings to retrieve completions from a different index
       * @param {number} [limit] - the number of completions to return
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives an array with the candidate completion
       * strings.
       */
      suggest(args:{partial:string, query:query.Query, bindings?:query.SuggestBindings, limit?:number}):ResultProvider<string[]>
    }
  }
}
