declare module 'marklogic' {
  namespace query {

    /**
     * Mappings of constraint names to indexes as returned
     * by the {@link queryBuilder#suggestBindings} function
     * to pass to a {@link documents#suggest} function
     * to retreive suggestions for completing criteria
     * for the constraints.
     * @typedef {object} queryBuilder.SuggestBindings
     */
    interface SuggestBindings {
      __$_query_SuggestBindings
    }
    /**
     * An indexed name such as a JSON property, XML element or attribute, field,
     * or path index.
     * @typedef {object} queryBuilder.IndexedName
     */
    interface IndexedName {
      __$_query_IndexedName
    }
    /**
     * An indexed name such as a JSON property, XML element, or path that
     * represents a geospatial location for matched by a geospatial query.
     * @typedef {object} queryBuilder.GeoLocation
     */
    interface GeoLocation {
      __$_query_GeoLocation
    }
    /**
     * The specification of a point or an area (such as a box, circle, or polygon)
     * for use as criteria in a geospatial query.
     * @typedef {object} queryBuilder.Region
     */
    interface Region {
      __$_query_Region
    }
    /**
     * The specification of the latitude and longitude
     * returned by the {@link queryBuilder#latlon} function
     * for a coordinate of a {@link queryBuilder.Region}.
     * @typedef {object} queryBuilder.LatLon
     */
    interface LatLon {
      __$_query_LatLon
    }
    /**
     * The ordering returned by the {@link queryBuilder#ordered} function.
     * @typedef {object} queryBuilder.OrderParam
     */
    interface OrderParam {
      __$_query_OrderParam
    }
    /**
     * A namespaced name for an element or attribute returned
     * by the {@link queryBuilder#qname} function.
     * @typedef {object} queryBuilder.QName
     */
    interface QName {
      __$_query_QName
    }
    /**
     * A binding returned by the {@link queryBuilder#bind} function
     * for parsing a query string. The binding declares a constraint name
     * that tags the values in the query string and occupies the position
     * of the values in a query.
     * @typedef {object} queryBuilder.BindingParam
     */
    interface BindingParam {
      __$_query_BindingParam
    }
    /**
     * The weight modification returned by the {@link queryBuilder#weight} function.
     * @typedef {object} queryBuilder.WeightParam
     */
    interface WeightParam {
      __$_query_WeightParam
    }
    /**
     * Options for a temporal query returned by
     * the {@link queryBuilder#temporalOptions} function.
     * @typedef {object} queryBuilder.TemporalOptionsParam
     */
    interface TemporalOptionsParam {
      __$_query_TemporalOptionsParam
    }
    /**
     * A query argument specifying whether queries match documents based on
     * document content or document metadata properties; returned
     * by the {@link queryBuilder#fragmentScope} function.
     * @typedef {object} queryBuilder.FragmentScopeParam
     */
    interface FragmentScopeParam {
      __$_query_FragmentScopeParam
    }
    /**
     * The datatype specification returned by the {@link queryBuilder#datatype}
     * function.
     * @typedef {object} queryBuilder.DatatypeParam
     */
    interface DatatypeParam {
      __$_query_DatatypeParam
    }
    interface PathIndex {
      __$_query_PathIndex
    }
    /**
     * Options for a geospatial query returned by
     * the {@link queryBuilder#geoOptions} function.
     * @typedef {object} queryBuilder.GeoOptionsParam
     */
    interface GeoOptionsParam {
      __$_query_GeoOptionsParam
    }
    /**
     * Specifies the buckets for a geospatial facet.
     * @typedef {object} queryBuilder.HeatMapParam
     */
    interface HeatMapParam {
      __$_query_HeatMapParam
    }
    /**
     * The specification for a timespan or timestamp for an query
     * returned by the {@link queryBuilder#period} function.
     * @typedef {object} queryBuilder.PeriodParam
     */
    interface PeriodParam {
      __$_query_PeriodParam
    }
    /**
     * Options for suggestions to retrieve from a word, value, collection, range, or geospatial
     * index as returned by
     * the {@link queryBuilder#suggestOptions} function.
     * @typedef {object} queryBuilder.SuggestOptionsParam
     */
    interface SuggestOptionsParam {
      __$_query_SuggestOptionsParam
    }
    /**
     * Options for a range query returned by the {@link queryBuilder#rangeOptions}
     * function.
     * @typedef {object} queryBuilder.RangeOptionsParam
     */
    interface RangeOptionsParam {
      __$_query_RangeOptionsParam
    }
    /**
     * Options for a range query returned by the {@link queryBuilder#termOptions}
     * function.
     * @typedef {object} queryBuilder.TermOptionsParam
     */
    interface TermOptionsParam {
      __$_query_TermOptionsParam
    }
    /**
     * A binding returned by the {@link queryBuilder#bindDefault} function
     * for parsing a query string. The binding associates untagged values
     * in the query string with a query, occupying the position of the
     * values in a query. A search can have only one default binding.
     * @typedef {object} queryBuilder.DefaultBindingParam
     */
    interface DefaultBindingParam {
      __$_query_DefaultBindingParam
    }
    /**
     * The specification returned by the {@link queryBuilder#jsontype}
     * function.
     * @typedef {object} queryBuilder.JSONTypeParam
     */
    interface JSONTypeParam {
      __$_query_JSONTypeParam
    }
    /**
     * A query definition returned by the {@link queryBuilder#byExample} function
     * to pass to a {@link queryBuilder#where} function.
     * @typedef {object} queryBuilder.QueryByExample
     */
    interface QueryByExample {
      __$_query_QueryByExample
    }
    /**
     * A sort definition returned by the {@link queryBuilder#score} function
     * to pass to a {@link queryBuilder#orderBy} function.
     * @typedef {object} queryBuilder.Score
     */
    interface Score {
      __$_query_Score
    }
    /**
     * A sort definition returned by the {@link queryBuilder#sort} function
     * to pass to a {@link queryBuilder#orderBy} function.
     * @typedef {object} queryBuilder.Sort
     */
    interface Sort {
      __$_query_Sort
    }
    /**
     * A facet definition returned by the {@link queryBuilder#facet} function
     * to pass to a {@link queryBuilder#calculate} function.
     * @typedef {object} queryBuilder.Facet
     */
    interface Facet {
      __$_query_Facet
    }
    /**
     * The definition of a numeric or datetime range returned by the {@link queryBuilder#bucket} function
     * for aggregating value frequencies with a {@link queryBuilder#facet} function.
     * @typedef {object} queryBuilder.BucketParam
     */
    interface BucketParam {
      __$_query_BucketParam
    }
    /**
     * The specification for a custom constraint facet generation module
     * as returned by {@link queryBuilder#calculateFunction} to pass
     * to the {@link queryBuilder#facet} function.
     * @typedef {object} queryBuilder.CalculateFunction
     */
    interface CalculateFunction {
      __$_query_CalculateFunction
    }
    /**
     * Options for a facet calculation returned by the {@link queryBuilder#facetOptions}
     * function.
     * @typedef {object} queryBuilder.FacetOptionsParam
     */
    interface FacetOptionsParam {
      __$_query_FacetOptionsParam
    }
    /**
     * The specification for computing a datetime boundary or range as returned by
     * the {@link queryBuilder#anchor} function to pass to the {@link queryBuilder#bucket} function.
     * @typedef {object} queryBuilder.AnchorParam
     */
    interface AnchorParam {
      __$_query_AnchorParam
    }
    /**
     * Mappings of constraint names to queries as returned
     * by the {@link queryBuilder#parseBindings} function
     * to pass to a {@link queryBuilder#parsedFrom} function
     * for tagging values within the query string.
     * @typedef {object} queryBuilder.ParseBindings
     */
    interface ParseBindings {
      __$_query_ParseBindings
    }
    /**
     * The specification for a custom constraint parsing module as returned by
     * {@link queryBuilder#parseFunction} to pass
     * to the {@link queryBuilder#parseBindings} function.
     * @typedef {object} queryBuilder.ParseFunction
     */
    interface ParseFunction {
      __$_query_ParseFunction
    }
    /**
     * A specification whether an empty query string should be bound
     * to a query for no documents or all documents as returned
     * by the {@link queryBuilder#bindEmptyAs} function.
     * @typedef {object} queryBuilder.EmptyBindingParam
     */
    interface EmptyBindingParam{
      __$_query_EmptyBindingParam
    }
    /**
     * A query definition returned by the {@link queryBuilder#parsedFrom} function
     * to pass to a {@link queryBuilder#where} function.
     * @typedef {object} queryBuilder.ParsedQuery
     */
    interface ParsedQuery {
      __$_query_ParsedQuery
    }
    interface Transform {
      __$_query_Transform
    }

    interface Query {
      /**
       * Builds a query for the intersection of the subqueries.
       * @method
       * @memberof queryBuilder#
       * @param {...queryBuilder.Query} subquery - a word, value, range, geospatial,
       * or other query or a composer such as an or query.
       * @param {queryBuilder.OrderParam} [ordering] - the ordering on the subqueries
       * returned from {@link queryBuilder#ordered}
       * @returns {queryBuilder.Query} a composable query
       */
      and(...query: (Query|OrderParam)[]): Query

      /**
       * Builds a query with positive and negative subqueries.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} positiveQuery - a query that must match
       * the result documents
       * @param {queryBuilder.Query} negativeQuery - a query that must not match
       * the result documents
       * @returns {queryBuilder.Query} a composable query
       */
      andNode(positiveQuery:Query, negativeQuery:Query):Query

      /**
       * Specifies an XML attribute for a query.  A name without a namespace can be
       * expressed as a string.  A namespaced name can be expressed as a two-item
       * array with uri and name strings or as an object returned by the
       * {@link queryBuilder#qname} function.
       * @method
       * @memberof queryBuilder#
       * @param {string|string[]|queryBuilder.QName} element - the name of the element
       * @param {string|string[]|queryBuilder.QName} attribute - the name of the attribute
       * @returns {queryBuilder.IndexedName} an indexed name for specifying a query
       */
      attribute(element:string|string[]|QName, attribute:string|string[]|QName):IndexedName

      /**
       * Builds a query with matching and boosting subqueries.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} matchingQuery - a query that must match
       * the result documents
       * @param {queryBuilder.Query} boostingQuery - a query that increases
       * the ranking when qualifying result documents
       * @returns {queryBuilder.Query} a composable query
       */
      boost(matchingQuery:Query, boostingQuery:Query):Query

      /**
       * Specifies a rectangular region with the coordinates of the corners.
       * The coordinates can be specified either by passing the return value
       * from the {@link queryBuilder#southWestNorthEast} function or as a list
       * of {queryBuilder.LatLon} coordinates in South, West, North, and East order.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.LatLon} south - the south coordinate of the box
       * @param {queryBuilder.LatLon} west - the west coordinate for the box
       * @param {queryBuilder.LatLon} north - the north coordinate for the box
       * @param {queryBuilder.LatLon} east - the east coordinate for the box
       * @returns {queryBuilder.Region} the region criteria for a geospatial query
       */
      box(south:LatLon, west:LatLon, north:LatLon, east:LatLon):Region

      /**
       * Specifies a circular region based on a radius and the coordinate of the center.
       * The coordinate can either be specified by passing the return value from
       * the {@link queryBuilder#latlon} function or by passing the latitude and longitude
       * numbers in that order (possibly wrapped in an array).
       * @method
       * @memberof queryBuilder#
       * @param {number} radius - the radius for the circle
       * @param {queryBuilder.LatLon} center - the center for the circle
       * @returns {queryBuilder.Region} the region criteria for a geospatial query
       */
      circle(radius: number, lat: number, long: number): Region

      /**
       * Builds a query matching documents in one or more collections as part
       * of a document query.  The collections can be specified as arguments or
       * parsed from a query string based on a binding. Also, as part of a values
       * query, the collection() function identifies the collection index
       * without supplying criteria. In a values query, the tuples (aka rows)
       * projected from each document have a column whose values are the
       * collections to which the document belongs.
       * @method
       * @memberof queryBuilder#
       * @param {string|string[]|queryBuilder.BindingParam} collections - either
       * one or more collection uris to match or exactly one binding (returned
       * by the {@link queryBuilder#bind} function) for parsing the collection
       * uris from a query string; required except for values queries
       * @param {string} [prefix] - a prefix to prepend to each value provided by
       * the parsed query string; can be provided only when providing a binding
       * @returns {queryBuilder.Query} a composable query
       */
      collection(collections:string|string[]|BindingParam, prefix?:string):Query

      /**
       * Builds a query matching temporal documents with a system start time
       * prior to the LSQT (Latest System Query Time). Advancing the LSQT can be
       * done manually or on an automated basis to include more recent
       * temporal documents in the result set.
       * @method
       * @memberof queryBuilder#
       * @param {string} temporalCollection - the name of the temporal collection
       * that retains the temporal documents
       * @param {queryBuilder.WeightParam} [weight] - a weight returned
       * by {@link queryBuilder#weight} to increase or decrease the score
       * of subqueries relative to other queries in the complete search
       * @param {string|Date} [timestamp] - a datetime older than the LSQT
       * to use as the upper boundary for an older view of the database
       * @param {queryBuilder.TemporalOptionsParam} [temporalOptions] - a list
       * of options returned by {@link queryBuilder#temporalOptions} to modify
       * the temporal query
       * @returns {queryBuilder.Query} a composable query
       */
      lsqtQuery(temporalCollection:string, weight?:WeightParam, timestamp?:string|Date, temporalOptions?:TemporalOptionsParam):Query

      /**
       * Builds a query naming a JSON property or XML element that must contain
       * the matches for a subquery (which may be a composer query such as those
       * returned by the {@link queryBuilder#and} and {@link queryBuilder#or}).
       * @method
       * @memberof queryBuilder#
       * @param {string|queryBuilder.IndexedName} propertyOrElement - the JSON
       * property or XML element that contains the query matches; a string is
       * treated as a JSON property
       * @param {queryBuilder.Query|queryBuilder.BindingParam} query - either the
       * query that must match within the scope of the JSON property or XML element
       * or a binding (returned by the {@link queryBuilder#bind} function) for
       * parsing the subquery from a query string
       * @param {queryBuilder.FragmentScopeParam} [fragmentScope] - whether the query
       * applies to document content (the default) or document metadata properties
       * as returned by the {@link queryBuilder#fragmentScope} function
       * @returns {queryBuilder.Query} a composable query
       */
      scope(propertyOrElement:IndexedName, query:Query|BindingParam, fragmentScope?:FragmentScopeParam):Query

      /**
       * Identifies the datatype of an index.
       * @method
       * @memberof queryBuilder#
       * @param {string} datatype - a value from the enumeration
       * int|unsignedInt|long|unsignedLong|float|double|decimal|dateTime|time|date|gYearMonth|gYear|gMonth|gDay|yearMonthDuration|dayTimeDuration|string|anyURI|point
       * @param {string} [collation] - a URI identifying the comparison method for a string or anyURI datatype
       * @returns {queryBuilder.DatatypeParam} a datatype specification
       */
      datatype(datatype:string, collation?:string):DatatypeParam

      /**
       * Builds a query matching documents in one or more database directories.
       * @method
       * @memberof queryBuilder#
       * @param {string|string[]} uris - one or more directory uris
       * to match
       * @param {boolean} [infinite] - whether to match documents at the top level or
       * at any level of depth within the specified directories
       * @returns {queryBuilder.Query} a composable query
       */
      directory(uris: string|string[], infinite?:boolean): Query

      /**
       * Builds a query matching documents.
       * @method
       * @memberof queryBuilder#
       * @param {string|string[]} uris - one or more document uris
       * to match
       * @returns {queryBuilder.Query} a composable query
       */
      document(uris: string|string[]): Query

      /**
       * Builds a query that applies the subquery to document content by contrast
       * with the {@link queryBuilder#properties} function.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} query - the query that must match document content
       * @returns {queryBuilder.Query} a composable query
       */
      documentFragment(query:Query):Query

      /**
       * Specifies an XML element for a query.  A name without a namespace can be
       * expressed as a string.  A namespaced name can be expressed as a two-item
       * array with uri and name strings or as an object returned by the
       * {@link queryBuilder#qname} function.
       * @method
       * @memberof queryBuilder#
       * @param {string|string[]|queryBuilder.QName} name - the name of the element
       * @returns {queryBuilder.IndexedName} an indexed name for specifying a query
       */
      element(name:string|string[]|QName):IndexedName

      /**
       * Specifies a field for a query.
       * @method
       * @memberof queryBuilder#
       * @param {string} name - the name of the field
       * @param {string} [collation] - the collation of a field over strings
       * @returns {queryBuilder.IndexedName} an indexed name for specifying a query
       */
      field(name:string, collation?:string):IndexedName

      /**
       * Configures a query to match documents based on document content or
       * document metadata properties.
       * @method
       * @memberof queryBuilder#
       * @param {string} scopeType - a value from the documents|properties
       * enumeration where 'documents' queries document content and
       * 'properties' queries document metadata properties
       * @returns {queryBuilder.FragmentScopeParam} a fragment scope specification
       */
      fragmentScope(scopeType:string):FragmentScopeParam

      /**
       * Specifies the geospatial locations represented by an XML attribute pair
       * for passing to the {@link queryBuilder#geospatial} function.
       * @method
       * @memberof queryBuilder#
       * @param {string|queryBuilder.QName} parent - the name of the element
       * containing the attributes as returned by the {@link queryBuilder#qname} function
       * @param {string|queryBuilder.QName} latitude - the name of the latitude
       * attribute as returned by the {@link queryBuilder#qname} function
       * @param {string|queryBuilder.QName} longitude -  the name of the longitude
       * attribute as returned by the {@link queryBuilder#qname} function
       * @returns {queryBuilder.GeoLocation} the specification for the geospatial locations
       */
      geoAttributePair(parent:string|QName, latitude:string|QName, longitude:string|QName):GeoLocation

      /**
       * Specifies the geospatial locations represented by an XML element
       * containing a comma-separated pair of latitude-longitude values
       * for passing to the {@link queryBuilder#geospatial} function.
       * @method
       * @memberof queryBuilder#
       * @param {string|queryBuilder.QName} [parent] - the optional name of the parent
       * of the geospatial element as returned by the {@link queryBuilder#qname} function
       * @param {string|queryBuilder.QName} element - the name of the element
       * as returned by the {@link queryBuilder#qname} function
       * @returns {queryBuilder.GeoLocation} the specification for the geospatial locations
       */
      geoElement(parentOrElement:string|QName, element?:string|QName):GeoLocation

      /**
       * Specifies the geospatial locations represented by an XML element pair
       * for passing to the {@link queryBuilder#geospatial} function.
       * @method
       * @memberof queryBuilder#
       * @param {string|queryBuilder.QName} parent - the name of the containing
       * parent element as returned by the {@link queryBuilder#qname} function
       * @param {string|queryBuilder.QName} latitude - the name of the latitude
       * element as returned by the {@link queryBuilder#qname} function
       * @param {string|queryBuilder.QName} longitude -  the name of the longitude
       * element as returned by the {@link queryBuilder#qname} function
       * @returns {queryBuilder.GeoLocation} the specification for the geospatial locations
       */
      geoElementPair(parent:string|QName, latitude:string|QName, longitude:string|QName):GeoLocation

      /**
       * Specifies the geospatial locations represented by a JSON property
       * containing a pair of latitude-longitude values for passing to
       * the {@link queryBuilder#geospatial} function.
       * @method
       * @memberof queryBuilder#
       * @param {string} [parent] - the optional name of the parent
       * of the geospatial property
       * @param {string} element - the name of the geospatial property
       * @returns {queryBuilder.GeoLocation} the specification for the geospatial locations
       */
      geoProperty(parentOrElement:string|QName, element?:string|QName):GeoLocation

      /**
       * Specifies the geospatial locations represented by a JSON property pair
       * for passing to the {@link queryBuilder#geospatial} function.
       * @method
       * @memberof queryBuilder#
       * @param {string} parent - the name of the containing parent property
       * @param {string} latitude - the name of the latitude property
       * @param {string} longitude -  the name of the longitude property
       * @returns {queryBuilder.GeoLocation} the specification for the geospatial locations
       */
      geoPropertyPair(parent:string|QName, latitude:string|QName, longitude:string|QName):GeoLocation

      /**
       * Specifies the geospatial locations represented by a path index on
       * JSON properties or XML elements containing a pair of latitude-longitude values
       * for passing to the {@link queryBuilder#geospatial} function.
       * @method
       * @memberof queryBuilder#
       * @param {string|object} path - the XPath for the path index as a string or
       * as the return value of the {@link queryBuilder#pathIndex} function
       * @returns {queryBuilder.GeoLocation} the specification for the geospatial locations
       */
      geoPath(path:string|PathIndex):GeoLocation

      /**
       * Builds a geospatial query or facet. For a query, you must supply
       * either the {queryBuilder.Region} criteria or a binding to parse
       * the region criteria from a query string but not both.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.GeoLocation} location - the JSON property or XML element
       * representing the geospatial locations
       * @param {queryBuilder.FragmentScopeParam} [fragmentScope] - whether the query
       * applies to document content (the default) or document metadata properties
       * as returned by the {@link queryBuilder#fragmentScope} function
       * @param {queryBuilder.GeoOptionsParam} [geoOptions] - a list
       * of options returned by {@link queryBuilder#geoOptions} to modify
       * the geospatial query
       * @param {queryBuilder.Region|queryBuilder.BindingParam} [criteria] - either
       * a point matching or region containing geospatial locations in the documents
       * or a binding (returned by the {@link queryBuilder#bind} function) for parsing
       * the point or region from a query string
       * @returns {queryBuilder.Query} a composable query
       */
      geospatial(location: GeoLocation, fragementScope?:FragmentScopeParam, geoOptions?:GeoOptionsParam, criteria?: Region|BindingParam): Query

      /**
       * Divides a geospatial box into a two-dimensional grid for calculating facets
       * based on document counts for each cell within the grid.
       * The coordinates of the box can be specified either by passing the return value
       * from the {@link queryBuilder#southWestNorthEast} function or as a list
       * of {queryBuilder.LatLon} coordinates in South, West, North, and East order.
       * @method
       * @memberof queryBuilder#
       * @param {number} latdivs - the number of latitude divisions in the grid
       * @param {number} londivs - the number of longitude divisions in the grid
       * @param {queryBuilder.LatLon} south - the south coordinate of the box
       * @param {queryBuilder.LatLon} west - the west coordinate for the box
       * @param {queryBuilder.LatLon} north - the north coordinate for the box
       * @param {queryBuilder.LatLon} east - the east coordinate for the box
       * @returns {queryBuilder.HeatMapParam} the buckets for a geospatial facet
       */
      heatmap(latdivs:number, londivs:number, south:LatLon, west:LatLon, north:LatLon, east:LatLon):HeatMapParam

      /**
       * Provides options modifying the default behavior of a
       * {@link queryBuilder#geospatial} query.
       * @method
       * @memberof queryBuilder#
       * @param {...string} options - options supported for geospatial queries
       * @returns {queryBuilder.GeoOptionsParam} options for the geospatial query
       */
      geoOptions(...options:string[]):GeoOptionsParam

      /**
       * Specifies the latitude and longitude for a coordinate of the region
       * criteria for a geospatial query. The latitude and longitude can be
       * passed as individual numeric parameters or wrapped in an array
       * @method
       * @memberof queryBuilder#
       * @param {number} latitude - the north-south location
       * @param {number} longitude - the east-west location
       * @returns {queryBuilder.LatLon} a coordinate for a {queryBuilder.Region}
       */
      latLon(latitude:number, longitude:number):LatLon

      /**
       * Builds a query that applies the subquery to document lock fragments by contrast
       * with the {@link queryBuilder#documentFragment} function.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} query - the query that must match document lock fragments
       * @returns {queryBuilder.Query} a composable query
       */
      locksFragment(query:Query):Query

      /**
       * Builds a query that matches the subqueries within a specified proximity.
       * @method
       * @memberof queryBuilder#
       * @param {...queryBuilder.Query} subquery - a word, value, range, geospatial,
       * or other query or a composer such as an or query.
       * @param {queryBuilder.number} [distance] - the maximum number of words
       * between any two matching subqueries
       * @param {queryBuilder.WeightParam} [weight] - a weight returned
       * by {@link queryBuilder#weight} to increase or decrease the score
       * of subqueries relative to other queries in the complete search
       * @param {queryBuilder.OrderParam} [ordering] - the ordering on the subqueries
       * returned from {@link queryBuilder#ordered}
       * @returns {queryBuilder.Query} a composable query
       */
      near(...subqueries:(Query|number|WeightParam|OrderParam)[]):Query

      /**
       * Builds a query that removes any documents matched by the subquery.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} subquery - a word, value, range, geospatial,
       * or other query or a composer such as an or query.
       * @returns {queryBuilder.Query} a composable query
       */
      not(subquery:Query):Query

      /**
       * Builds a query where the matching content qualifies for the positive query
       * and does not qualify for the negative query. Positions must be enabled for indexes.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} positiveQuery - a query that must match
       * the content
       * @param {queryBuilder.Query} negativeQuery - a query that must not match
       * the same content
       * @returns {queryBuilder.Query} a composable query
       */
      notIn(positiveQuery:Query, negativeQuery:Query):Query

      /**
       * Builds a query for the union intersection of subqueries.
       * @method
       * @memberof queryBuilder#
       * @param {...queryBuilder.Query} subquery - a word, value, range, geospatial,
       * or other query or a composer such as an and query.
       * @returns {queryBuilder.Query} a composable query
       */
      or(...subquery:Query[]):Query

      /**
       * Specifies ordering for an {@link queryBuilder#and} or
       * {@link queryBuilder#near} query.
       * @method
       * @memberof queryBuilder#
       * @param {boolean} isOrdered - whether subqueries are ordered
       * @returns {queryBuilder.OrderParam} a query flag for ordering
       */
      ordered(isOrdered:boolean):OrderParam

      /**
       * Specifies a path configured as an index over JSON or XML documents on the server.
       * @method
       * @memberof queryBuilder#
       * @param {string} pathExpression - the indexed path
       * @param {object} namespaces - bindings between the prefixes in the path and
       * namespace URIs
       * @returns {queryBuilder.IndexedName} an indexed name for specifying a query
       */
      pathIndex(pathExpression: string, namespaces?: {[prefix:string]:string}): IndexedName

      /**
       * Specifies a point region either by passing the return value from
       * the {@link queryBuilder#latlon} function or by passing the latitude and longitude
       * numbers in that order (possibly wrapped in an array).
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.LatLon} coordinate - the point location
       * @returns {queryBuilder.Region} the region criteria for a geospatial query
       */
      point(coordinate:LatLon):Region

      /**
       * Specifies a polygon region as a list of coordinate parameters or as a coordinate array
       * where each coordinate is specified either by the return value from
       * the {@link queryBuilder#latlon} function or by wrapping the latitude and
       * longitude numbers in an array.
       * @method
       * @memberof queryBuilder#
       * @param {...queryBuilder.LatLon} coordinate - the polygon coordinates
       * @returns {queryBuilder.Region} the region criteria for a geospatial query
       */
      polygon(...coordinates:LatLon[]):Region

      /**
       * Builds a query that applies the subquery to document metadata by contrast
       * with the {@link queryBuilder#documentFragment} function.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} query - the query that must match document metadata
       * properties
       * @returns {queryBuilder.Query} a composable query
       */
      propertiesFragment(query:Query):Query

      /**
       * Specifies a JSON property for a query.  As a shortcut, a JSON property
       * can also be specified with a string instead of calling this function.
       * @method
       * @memberof queryBuilder#
       * @param {string} name - the name of the property
       * @returns {queryBuilder.IndexedName} an indexed name for specifying a query
       */
      property(name:string):IndexedName

      /**
       * Specifies an XML qualified name.
       * @method
       * @memberof queryBuilder#
       * @param {string|string[]} parts - the namespace URI and name
       * for the QName supplied either as two strings or as an array with
       * two strings.
       * @returns {queryBuilder.QName} a QName for identifying
       * an element or attribute
       */
      qname(parts:string|string[]):QName

      /**
       * Specifies a timespan or timestamp for comparison with
       * a valid or system timespan in temporal documents in
       * a {@link queryBuilder#periodRange} temporal query.
       * @method
       * @memberof queryBuilder#
       * @param {string|Date} startTimestamp - the starting datetime for a timespan
       * or the datetime for a timestamp
       * @param {string|Date} [endTimestamp] - the starting datetime for a timespan
       * or the datetime for a timestamp
       * @returns {queryBuilder.PeriodParam} the specification of a period
       * for a {@link queryBuilder#periodRange} temporal query
       */
      period(startTimestamp:string|Date, endTimestamp?:string|Date):PeriodParam

      /**
       * Builds a query matching temporal documents based on the relationship
       * between the valid period and the system period.  For instance, this
       * query can find cases where what was believed to be true (the valid time)
       * was recorded (the system time) only afterward (the valid axis is before
       * the system axis).
       * @method
       * @memberof queryBuilder#
       * @param {string} axis1 - the configured name of the valid or system axis
       * @param {string} operator - the name of an Allen interval operator or
       * ISO SQL 2011 period operator
       * @param {string} axis2 - the configured name of the valid or system axis, which
       * must be different from axis1
       * @param {queryBuilder.TemporalOptionsParam} [temporalOptions] - a list
       * of options returned by {@link queryBuilder#temporalOptions} to modify
       * the temporal query
       * @returns {queryBuilder.Query} a composable query
       */
      periodCompare(axis1:string, operator:string, axis2:string, temporalOptions?:TemporalOptionsParam):Query

      /**
       * Builds a query matching temporal documents based on the relationship
       * between the valid or system period and the specified period.
       * This query can find what was believed to be true (the valid time)
       * or was recorded (the system time) during a timespan or before or
       * after a time.
       * @method
       * @memberof queryBuilder#
       * @param {string} axis - the configured name of the valid or system axis
       * @param {string} operator - the name of an Allen interval operator or
       * ISO SQL 2011 period operator
       * @param {queryBuilder.PeriodParam} [period] - a timespan or timestamp
       * returned by {@link queryBuilder#period} to compare with the valid or
       * system time of temporal documents
       * @param {queryBuilder.TemporalOptionsParam} [temporalOptions] - a list
       * of options returned by {@link queryBuilder#temporalOptions} to modify
       * the temporal query
       * @returns {queryBuilder.Query} a composable query
       */
      periodRange(axis:string, operator:string, period?:PeriodParam, temporalOptions?:TemporalOptionsParam):Query

      /**
       * Maps constraint names to indexes for passing to
       * the {@link documents#suggest} function
       * to retreive suggestions for completing criteria
       * for the constraints.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query} ...query - queries that contain a binding
       * to a constraint name as returned by the {@link queryBuilder#bind}
       * @returns {queryBuilder.SuggestBindings} a list of constraint bindings for
       * the {@link documents#suggest} function
       */
      suggestBindings(...query:Query[]):SuggestBindings

      /**
       * Provides options modifying the default behavior of an
       * {@link documents#suggest} query.
       * @method
       * @memberof queryBuilder#
       * @param {...string} options - one or more options supported by {@link documents#suggest}
       * for the type of index
       * @returns {queryBuilder.SuggestOptionsParam} options for the suggest query
       */
      suggestOptions(...options:string[]):SuggestOptionsParam

      /**
       * Provides options modifying the default behavior of an
       * {@link queryBuilder#lsqtQuery},
       * {@link queryBuilder#periodCompare}, or
       * {@link queryBuilder#periodRange} query.
       * @method
       * @memberof queryBuilder#
       * @param {...string} options - options supported for temporal queries
       * @returns {queryBuilder.TemporalOptionsParam} options for the temporal query
       */
      temporalOptions(...options:string[]):TemporalOptionsParam

      /**
       * Builds a query over a range index. You must supply
       * either a comparison operator with one or more values or a binding
       * to parse the comparison and value from a query string but not both.
       * You can provide both named and default bindings for the same query.
       * @method
       * @memberof queryBuilder#
       * @param {string|queryBuilder.IndexedName} indexedName - the JSON
       * property, XML element or attribute, field, or path providing the values
       * to the range index
       * @param {queryBuilder.DatatypeParam} [datatype] - a datatype returned
       * by the {@link queryBuilder#datatype} to identify the index
       * @param {string} [comparison] - an operator from the enumeration
       * =|!=|<|<=|>|>= defaulting to the = (equivalence) operator
       * @param [...value] - one or more values for comparison with the indexed values
       * @param {queryBuilder.BindingParam} [binding] - a binding
       * (returned by the {@link queryBuilder#bind} function) for parsing the
       * comparison operator and value from tagged values in a query string
       * @param {queryBuilder.DefaultBindingParam} [defaultBinding] - a binding
       * (returned by the {@link queryBuilder#bindDefault} function) for parsing
       * the comparison operator and value from untagged values in a query string
       * @param {queryBuilder.FragmentScopeParam} [fragmentScope] - whether the query
       * applies to document content (the default) or document metadata properties
       * as returned by the {@link queryBuilder#fragmentScope} function
       * @param {queryBuilder.RangeOptionsParam} [options] - options
       * from {@link queryBuilder#rangeOptions} modifying the default behavior
       * @returns {queryBuilder.Query} a composable query
       */
      range(indexedName:string|IndexedName, datatype?:DatatypeParam, comparison?:string, ...value:(any)[]):Query

      /**
       * Provides options modifying the default behavior
       * of a {@link queryBuilder#range} query.
       * @method
       * @memberof queryBuilder#
       * @param {...string} options - options supported for range queries
       * @returns {queryBuilder.RangeOptionsParam} options for a {@link queryBuilder#range} query
       */
      rangeOptions(...options:string[]):RangeOptionsParam

      /**
       * Specifies the coordinates of a box as a list of parameters
       * for passing to the {@link queryBuilder#box} function
       * or to the {@link queryBuilder#heatmap} function
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.LatLon} south - the south coordinate
       * @param {queryBuilder.LatLon} west - the west coordinate
       * @param {queryBuilder.LatLon} north - the north coordinate
       * @param {queryBuilder.LatLon} east - the east coordinate
       * @returns {object} the coordinates for the box
       */
      southWestNorthEast(south:LatLon, west:LatLon, north:LatLon, east:LatLon):Object

      /**
       * Builds a query for matching words in a JSON, text, or XML document.
       * @method
       * @memberof queryBuilder#
       * @param {string} [...text] - one or more words to match
       * @param {queryBuilder.WeightParam} [weight] - a weight returned
       * by {@link queryBuilder#weight} to increase or decrease the score
       * of the query relative to other queries in the complete search
       * @returns {queryBuilder.Query} a composable query
       */
      term(...text:(string|WeightParam)[]):Query

      /**
       * Provides options modifying the default behavior
       * of a {@link queryBuilder#value} or {@link queryBuilder#word} query.
       * @method
       * @memberof queryBuilder#
       * @param {...string} options - options supported for value or word queries
       * @returns {queryBuilder.TermOptionsParam} options for a value or word query
       */
      termOptions(...options:string[]):TermOptionsParam

      /**
       * Builds a query for matching the entire text value contained by a JSON property
       * or XML element.
       * You must supply either one or more text values or a binding to parse the text
       * value from a query string but not both. You can provide both named and
       * default bindings for the same query.
       * @method
       * @memberof queryBuilder#
       * @param {string|queryBuilder.IndexedName} indexedName - the JSON
       * property, XML element, field, or path containing the value
       * @param {string} [...text] - one or more values to match
       * @param {queryBuilder.BindingParam} [binding] - a binding
       * (returned by the {@link queryBuilder#bind} function) for parsing the text value
       * from tagged values in a query string
       * @param {queryBuilder.DefaultBindingParam} [defaultBinding] - a binding
       * (returned by the {@link queryBuilder#bindDefault} function) for parsing
       * the text value from untagged values in a query string
       * @param {queryBuilder.WeightParam} [weight] - a weight returned
       * by {@link queryBuilder#weight} to increase or decrease the score
       * of the query relative to other queries in the complete search
       * @param {queryBuilder.FragmentScopeParam} [fragmentScope] - whether the query
       * applies to document content (the default) or document metadata properties
       * as returned by the {@link queryBuilder#fragmentScope} function
       * @param {queryBuilder.TermOptionsParam} [options] - options
       * from {@link queryBuilder#termOptions} modifying the default behavior
       * @returns {queryBuilder.Query} a composable query
       */
      value(indexedName:string|IndexedName, ...text:(string|BindingParam|DefaultBindingParam|WeightParam|FragmentScopeParam|TermOptionsParam)[]):Query

      /**
       * Identifies whether a JSON property has boolean, null, numeric, or string values in the database.
       * @method
       * @memberof queryBuilder#
       * @param {string} jsontype - a value from the enumeration
       * boolean|null|number|string
       * @returns {queryBuilder.JSONTypeParam} a JSON value type specification
       */
      jsontype(jsontype:string):JSONTypeParam

      /**
       * Increases or decreases the contribution of the query relative
       * to other queries in the result documents ranking.
       * @method
       * @memberof queryBuilder#
       * @param {number} modifier - a number between -16 and 64 modifying
       * the contribution of the query to the score
       * @returns {queryBuilder.WeightParam} a query flag for weight
       */
      weightParam(modifier:number):WeightParam

      /**
       * Builds a query for matching the word contained by a JSON property
       * or XML element.
       * You must supply either one or more words or a binding to parse the words
       * from a query string but not both. You can provide both named and
       * default bindings for the same query.
       * @method
       * @memberof queryBuilder#
       * @param {string|queryBuilder.IndexedName} indexedName - the JSON
       * property, XML element, field, or path containing the word
       * @param {string} [...text] - one or more words to match
       * @param {queryBuilder.BindingParam} [binding] - a binding
       * (returned by the {@link queryBuilder#bind} function) for parsing the word
       * from tagged word s in a query string
       * @param {queryBuilder.DefaultBindingParam} [defaultBinding] - a binding
       * (returned by the {@link queryBuilder#bindDefault} function) for parsing
       * the word from untagged words in a query string
       * @param {queryBuilder.WeightParam} [weight] - a weight returned
       * by {@link queryBuilder#weight} to increase or decrease the score
       * of the query relative to other queries in the complete search
       * @param {queryBuilder.FragmentScopeParam} [fragmentScope] - whether the query
       * applies to document content (the default) or document metadata properties
       * as returned by the {@link queryBuilder#fragmentScope} function
       * @param {queryBuilder.TermOptionsParam} [options] - options
       * from {@link queryBuilder#termOptions} modifying the default behavior
       * @returns {queryBuilder.Query} a composable query
       */
      word(indexedName:string|IndexedName, ...text:(string|BindingParam|DefaultBindingParam|WeightParam|FragmentScopeParam|TermOptionsParam)[]):Query

      /**
       * Initializes a new query builder by copying any where, calculate,
       * orderBy, slice, or withOptions clause defined in the built query.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.BuiltQuery} query - an existing query with
       * clauses to copy
       * @returns {queryBuilder.BuiltQuery} a built query
       */
      copyFromQueryBuilder(query:BuiltQuery):BuiltQuery

      /**
       * Sets the where clause of a built query, using the helper functions
       * of a {@link queryBuilder} to specify either a single query by example,
       * a structured query, a string query, or both structured and string queries.
       * When you include a string and structured query, they are AND'd together.
       * You can use an empty where clause to qualify all documents in the database
       * (though for large databases, you would not want to retrieve all documents
       * in a single request).
       * This function may be called on a query builder or on the result of building a query.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query|queryBuilder.ParsedQuery|queryBuilder.QueryByExample} [query] - one
       * or more composable queries returned by query builder functions; or
       * a parsed query returned by the {@link queryBuilder#parsedFrom} function; or
       * or a parsed query plus one or more composable queries, which are implicitly
       * AND'd together; or a query by example returned by the
       * {@link queryBuilder#byExample} function.
       * @returns {queryBuilder.BuiltQuery} a built query
       */
      where(...query: (Query|ParsedQuery|QueryByExample)[]): BuiltQuery

      /**
       * Builds a query by example from one or more objects that annotate instances
       * of properties to match.
       * @method
       * @memberof queryBuilder#
       * @param {object} ...query - one or more objects with example properties
       * @returns {queryBuilder.QueryByExample} a query
       * for the {@link queryBuilder#where} function
       */
      byExample(...query:Object[]):QueryByExample

      /**
       * Sets the orderBy clause of a built query, using the helper functions
       * of a {@link queryBuilder} to specify the sequence and direction
       * of sorting. This function may be called on the result of building a query.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.IndexedName|queryBuilder.Score|queryBuilder.Sort} ...sortItem - a
       * JSON property, XML element or attribute, field, or path with a range index
       * or the relevance ranking of the document returned
       * by the {@link queryBuilder#score} function, where either may be returned
       * from the {@link queryBuilder#sort} function to indicate the sort direction.
       * @returns {queryBuilder.BuiltQuery} a built query
       */
      orderBy(...sortItem:(IndexedName|Score|Sort)[]):BuiltQuery

      /**
       * Specifies the relevance ranking for ordering documents
       * in the query results, optionally specifying the score method.
       * @method
       * @memberof queryBuilder#
       * @param {string} [method] - a scoring strategy from the enumeration
       * logtfidf|logtf|simple|random|zero, defaulting to logtfidf.
       * @returns {queryBuilder.Score} a sort definition
       * for the {@link queryBuilder#orderBy} function
       */
      score(method:string):Score

      /**
       * Specifies the direction for sorting documents for a range index or
       * relevance score.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.IndexedName|queryBuilder.Score} sortItem - a
       * JSON property, XML element or attribute, field, or path with a range index
       * or the relevance ranking of the document returned
       * by the {@link queryBuilder#score} function.
       * @param {string} direction - a specification from the
       * ascending|descending enumeration.
       * @returns {queryBuilder.Sort} a sort definition
       * for the {@link queryBuilder#orderBy} function
       */
      sort(sortItem:IndexedName|Score, direction:string):Sort

      /**
       * Specifies a transform for the documents or summary returned by a query
       * or the tuples list returned by a values query.
       * The transform must have been installed previously by
       * the {@link config.transforms#write} function
       * @method
       * @memberof queryBuilder#
       * @param {string} name - the name of the transform
       * @param {object} [params] - the parameters of the transform
       * as key-value pairs
       * @returns {object} a transform definition
       * for the {@link queryBuilder#slice} function
       */
      transform(name:string, params:{[key:string]:string}):Transform

      /**
       * Sets the slice clause of a built query to select a slice of documents
       * from the result set based on the start document within the result set
       * and the number of documents in the slice.  (A slice is also sometimes
       * called a page of search results.)
       * @method
       * @memberof queryBuilder#
       * @param {number} start - the one-based position within the result set
       * of the first document or 0 to suppress the documents and return only
       * the summary.
       * @param {number} [length] - the number of documents in the slice.
       * @param {transform} [transform] - a transform to apply to each document
       * in the slice on the server as specified by the {@link queryBuilder#transform}
       * function.
       * @returns {queryBuilder.BuiltQuery} a built query
       */
      slice(start:number, length?:number, transform?:Transform):BuiltQuery

      /**
       * Sets the calculate clause of a built query, specifying JSON properties,
       * XML elements or attributes, fields, or paths with a range index for
       * value frequency or other aggregate calculation.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Facet} ...facets - the facets to calculate
       * over the documents in the result set as returned by
       * the {@link queryBuilder#facet} function.
       * @returns {queryBuilder.BuiltQuery} a built query
       */
      calculate(...facets:Facet[]):BuiltQuery

      /**
       * Calculates frequency of the values in a collection, range index, or geospatial index
       * for the qualified documents.
       * You can enumerate the indexed values, group numeric or datetime values in buckets, or
       * group geospatial values in a heatmap grid.
       * The name of the facet can also be used as a constraint to tag values in a parsed string query
       * (if supplied in the {@link queryBuilder#where} clause) and bind the values
       * to a query.
       * @method
       * @memberof queryBuilder#
       * @param {string} name - a name for the facet to identify the calculated
       * result and use as a constraint to tag values in a parsed query string
       * @param {queryBuilder.IndexedName|queryBuilder.GeoLocation} indexedName - a JSON property,
       * XML element or attribute, field, or path with a range index or the specification
       * of a geospatial index.
       * @param {queryBuilder.BucketParam} [...bucket] - for a numeric or datetime facet,
       * two or more ranges returned by the {@link queryBuilder#bucket} function
       * @param {queryBuilder.HeatMapParam} [buckets] - for a geospatial facet,
       * a grid of geospatial locations returned by the {@link queryBuilder#heatmap} function
       * @param {queryBuilder.CalculateFunction} [custom] - for a custom facet, the specification
       * of a module returned by the {@link queryBuilder#calculateFunction} function
       * @param {queryBuilder.FacetOptionsParam} [options] - options
       * from {@link queryBuilder#facetOptions} modifying the default behavior
       * @returns {queryBuilder.Facet} a facet definition
       * for the {@link queryBuilder#calculate} function
       */
      facet(name: string, indexedName: string|IndexedName|GeoLocation, ...bucket:(BucketParam|HeatMapParam|CalculateFunction|FacetOptionsParam)[]): Facet

      /**
       * Specifies a module that generates a custom facet as an argument to the
       * {@link queryBuilder#facet} function.
       * The library must be installed as /ext/marklogic/query/custom/MODULE_NAME.xqy,
       * must have the http://marklogic.com/query/custom/MODULE_NAME namespace, and
       * must define the start-facet() and finish-facet() functions. The same module
       * can implement a parse() function for a custom parser specified with the
       * {@link queryBuilder#parseFunction} helper.
       * @method
       * @memberof queryBuilder#
       * @param {string} moduleName - the name of the module with the functions
       * @returns {queryBuilder.CalculateFunction} the specification for a custom facet
       * module for the {@link queryBuilder#facet} function.
       */
      calculateFunction(moduleName:string):CalculateFunction

      /**
       * Provides options modifying the default behavior
       * of a {@link queryBuilder#facet} calculation.
       * @method
       * @memberof queryBuilder#
       * @param {...string} options - options supported for facet calculations
       * @returns {queryBuilder.FacetOptionsParam} options for a {@link queryBuilder#facet} calculation
       */
      facetOptions(...options:string[]):FacetOptionsParam

      /**
       * Defines a numeric or datetime range of for aggregating value frequencies
       * as part of a {@link queryBuilder#facet} calculation. To compute both lower and upper bounds
       * relative to the same anchor, you can as a convenience return both bounds and the relation
       * from a single call to an {@link queryBuilder#anchor} function.
       * @method
       * @memberof queryBuilder#
       * @param {string} name - the name of the bucket
       * @param [lower] - the lower numeric or datetime boundary, which is less than or equal to the values
       * in the bucket; omit the lower bound to specify a bucket for the smallest values;
       * return the lower bound from an {@link queryBuilder#anchor} function to compute a datetime boundary
       * relative to a temporal milestone
       * @param {string} comparison - the constant '<' separating and comparing the lower and upper bounds
       * @param [upper] - the upper numeric or datetime boundary, which is greater than the values
       * in the bucket; omit the upper bound to specify a bucket for the largest values;
       * return the upper bound from an {@link queryBuilder#anchor} function to compute a datetime boundary
       * relative to a temporal milestone
       * @returns {queryBuilder.BucketParam} specification for a {@link queryBuilder#facet} calculation
       */
      bucket(name:string, lowerOrComparison:number|string, comparisonOrUpper?:number|string, upper?:number):BucketParam

      /**
       * Defines a numeric or datetime range of for aggregating value frequencies
       * as part of a {@link queryBuilder#facet} calculation. To compute both lower and upper bounds
       * relative to the same anchor, you can as a convenience return both bounds and the comparison
       * from a single call to an {@link queryBuilder#anchor} function.
       * @method
       * @memberof queryBuilder#
       * @param {string} milestone - the temporal milestone from the enumeration
       * now|start-of-day|start-of-month|start-of-year
       * @param {string} lower - a boundary as a duration offset relative to the temporal milestone
       * such as -P1Y for one year in the past, -P2D for two days in the past, and so on; formally,
       * an xs:duration, xs:yearMonthDuration, or xs:dayTimeDuration value
       * @param {string} [comparison] - the constant '<' separating the lower and upper bounds; if the
       * comparison is provided, the preceding offset must establish the lower bound and the following offset
       * must establish the upper bound
       * @param {string} [upper] - the upper boundary as a duration offset relative to the temporal milestone
       * @returns {queryBuilder.AnchorParam} specification for a {@link queryBuilder#bucket}
       * as part of a facet calculation
       */
      anchor(milestone:string, lower:string, comparison?:string, upper?:string):AnchorParam

      /**
       * Builds a parsed query from a string and bindings of constraint tags
       * to queries. The query parsing occurs on the server.
       * @method
       * @memberof queryBuilder#
       * @param {string} query - the string to parse
       * @param {queryBuilder.ParseBindings} bindings - the mappings of constraint names to queries
       * as returned by the {@link queryBuilder#parseBindings} function
       * @returns {queryBuilder.ParsedQuery} a query for
       * the {@link queryBuilder#where} function
       */
      parsedFrom(query:string, bindings:ParseBindings):ParsedQuery

      /**
       * Maps constraint names to queries and passed to
       * a {@link queryBuilder#parsedFrom} function
       * for tagging values within the query string.
       * The query parsing occurs on the server.
       * @method
       * @memberof queryBuilder#
       * @param {queryBuilder.Query|queryBuilder.ParseFunction} ...query - queries that contain a binding
       * to a constraint name as returned by the {@link queryBuilder#bind} (instead of
       * specifying the criteria directly in the query) or that supply a custom constraint parsing
       * function to generate the query as returned by the {@link queryBuilder#parseFunction}
       * @param {queryBuilder.EmptyBindingParam} [emptyBinding] - specifies whether an
       * empty string matches no documents or all documents as returned
       * by the {@link queryBuilder#bindEmptyAs} function
       * @returns {queryBuilder.ParseBindings} a list of constraint bindings for
       * the {@link queryBuilder#parsedFrom} function
       */
      parseBindings(...query:(Query|ParseFunction|EmptyBindingParam)[]):ParseBindings

      /**
       * Specifies a constraint name that binds values provided by a parsed
       * query string to a query. The values are tagged with the constraint
       * name in the query string. The binding occupies the position of the
       * values in the query specification.
       * @method
       * @memberof queryBuilder#
       * @param {string} parts - the constraint name
       * @returns {queryBuilder.BindingParam} the binding for the constraint name
       */
      bind(parts:string):BindingParam

      /**
       * Binds untagged values provided by a parsed query string to a query. The
       * binding occupies the position of the values in the query specification.
       * A search can have only one default binding.
       * @method
       * @memberof queryBuilder#
       * @returns {queryBuilder.DefaultBindingParam} the binding for the constraint name
       */
      bindDefault():DefaultBindingParam

      /**
       * Binds an empty query string to no documents or all documents.
       * @method
       * @memberof queryBuilder#
       * @param {string} apply - a function from the all-results|no-results
       * enumeration to control whether empty criteria matches all or no results
       * @returns {queryBuilder.EmptyBindingParam} the binding for an empty string
       * to pass to the {@link queryBuilder#parseBindings} function
       */
      bindEmptyAs(apply:string):EmptyBindingParam

      /**
       * Specifies a custom constraint module that parses a tagged value as an argument
       * to the {@link queryBuilder#parseBindings} function.
       * The library must be installed as /ext/marklogic/query/custom/MODULE_NAME.xqy,
       * must have the http://marklogic.com/query/custom/MODULE_NAME namespace, and
       * must define the parse() function. The same module can implement start-facet()
       * and finish-facet() functions for a custom facet specified with the
       * {@link queryBuilder#calculateFunction} helper.
       * @method
       * @memberof queryBuilder#
       * @param {string} moduleName - the name of the module with the function
       * @returns {queryBuilder.ParseFunction} the specification for a custom parsing
       * module for the {@link queryBuilder#parseBindings} function.
       */
      parseFunction(moduleName:string):ParseFunction

      /**
       * Specifies JSON properties or XML elements to project from the
       * documents returned by a query.
       * @method
       * @memberof queryBuilder#
       * @param {string|string[]} paths - restricted XPaths (valid for
       * the cts:valid-index-path() function) to match in documents
       * @param {object} [namespaces] - for XPaths using namespaces,
       * an object whose properties specify the prefix as the key and
       * the uri as the value
       * @param {string} [selected] - specifies how to process
       * the selected JSON properties or XML elements where
       * include (the default) lists the selections,
       * include-ancestors projects a sparse document with
       * the selections and their ancesors, and
       * exclude suppresses the selections to projects a sparse document
       * with the sibilings and ancestors of the selections.
       * @returns {object} a extract definition
       * for the {@link queryBuilder#slice} function
       */
      extract(paths:string|string[], namespaces?:{[key:string]:string}, selected?:string):Transform

      /**
       * Specifies a function for getting snippets with highlighted
       * matching text and contextual preceding and following text
       * from the documents returned by a query. You can specify
       * a built-in snippeting function or custom snippeting library.
       * The custom snippeting library must have been installed previously
       * by the {@link config.query.snippet#write} function
       * @method
       * @memberof queryBuilder#
       * @param {string} name - either the name of a builtin snippeting
       * function from the empty|metadata|snippet enumeration (where
       * snippet is the default) or the filename without path
       * for a custom snippeting library
       * @param {object} [options] - the configuration options
       * for a built-in snippeting function including
       * 'per-match-tokens', 'max-matches', 'max-snippet-chars',
       * and 'preferred-matches'; you cannot specify options or
       * parameters for a custom snippeting library
       * @returns {object} a snippet definition
       * for the {@link queryBuilder#slice} function
       */
      snippet(name:string, options?:{[key:string]:string}):Transform

      /**
       * Sets the withOptions clause of a built query to configure the query;
       * takes a configuration object with the following named parameters.
       * This function may be called on the result of building a query.
       * @method
       * @memberof queryBuilder#
       * @param {documents.categories}  [categories] - the categories of information
       * to retrieve for the result documents
       * @param {number} [concurrencyLevel] - the maximum number of threads to use to calculate facets
       * @param {...string} [forestNames] - the names of forests providing documents
       * for the result set
       * @param {...string} [search] - options modifying the default behaviour of the query
       * @param {string|transactions.Transaction}  [txid] - a string
       * transaction id or Transaction object identifying an open
       * multi-statement transaction
       * @param {number} [weight] - a weighting factor between -16 and 64
       * @param {boolean} [debug] - whether to return query debugging
       * @param {boolean} [metrics] - whether to return metrics for the query performance
       * @param {boolean} [queryPlan] - whether to return a plan for the execution of the query
       * @param {boolean} [similarDocs] - whether to return a list of URIs for documents
       * similar to each result
       * @returns {queryBuilder.BuiltQuery} a built query
       */
      withOptions(categories?:string, concurrencyLevel?:number, ...forestNames:(string|number|boolean)[]):BuiltQuery

    }

    /**
     * An object representing the result of building a query using
     * the helper functions of a {@link queryBuilder}.
     * @namespace queryBuilder.BuiltQuery
     */
    interface BuiltQuery {
      calculate(facet: Facet): BuiltQuery
      withOptions(options: any): BuiltQuery
      slice(start: number, length: number, transform: Transform): BuiltQuery
    }
  }
}
