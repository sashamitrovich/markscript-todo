declare module 'marklogic' {
  namespace values {
    interface DatatypedValuesIndex {
      __$_values_DatatypedValuesIndex
    }

    interface ValuesBuilder extends query.Query {
      /**
       * Specifies the range or geospatial indexes or collection or uri lexicons
       * from which to project columns in the response for the values query.
       * The response has a tuple (aka row) for each co-occurrence of these indexes
       * in the documents selected by the where clause.
       * This function must be called on the values builder.
       * @method valuesBuilder#fromIndexes
       * @param {string|valuesBuilder.DatatypedValuesIndex} indexes - a list
       * of parameters or array specifying the JSON properties, XML elements or attributes,
       * fields, or paths providing the range or geospatial indexes or the return value
       * from the collection() or uri() helper functions to specify those lexicons.
       * @returns {valuesBuilder.BuiltQuery} a built query
       */
      valuesFromIndexes(indexes:string|DatatypedValuesIndex):query.BuiltQuery

      /**
       * Specifies aggregates to calculate over the tuples (aka rows) projected
       * from the indexes for the documents selected by the where clause.
       * This function must be called on the builtQuery returned
       * by the {@link valuesBuilder#valuesFromIndexes} function
       * or another function specifying a values query clause.
       * @method valuesBuilder.BuiltQuery#aggregates
       * @param {string[]} functions - one or more built-in functions such
       * avg, correlation, count, covariance, covariance-population, max, median, min,
       * stddev, stddev-population, sum, variance, or variance-population or the
       * return values from the {@link valuesBuilder#udf} function specifying
       * a user-defined aggregate function.
       * @returns {valuesBuilder.BuiltQuery} a built query
       */
      aggregates(functions:string[]):query.BuiltQuery

      /**
       * Identifies a UDF (User Defined Function) that calculates
       * a custom aggregate different from a range index.
       * The plugin implementing the aggregate must have been
       * installed in the database server distribution on all hosts
       * where the database has forests.
       * @method valuesBuilder#udf
       * @param {string} pluginName - the name of the plugin library
       * that implements the UDF
       * @param {string} functionName - the name of the function
       * that is the entry point within the library
       * @returns {object} the definition of the UDF for passing
       * to the {@link valuesBuilder#aggregates} function
       */
      udf(pluginName:string, functionName: string):string

      /**
       * Identifies the uri index as the source for a column of values.
       * Each tuple (aka row) projected from a document includes the
       * uri of the document as one of the columns.
       * @method valuesBuilder#uri
       * @returns {valuesBuilder.DatatypedValuesIndex} an identifier for the uri index
       */
      valuesUri():DatatypedValuesIndex
    }

    /**
     * Provides functions to project tuples (aka rows) of values out of documents.
     * The values for the tuples come from JSON properties, XML elements or attributes,
     * fields, or paths in the documents that have range or geospatial indexes.
     * Values can also come from the collection or uri index. Each co-occurrence
     * of the specified indexes in a document produces a tuple.  For instance,
     * if one JSON property occurs twice in a document but another occurs only
     * once, the result will include two tuples:  that is, one co-occurrence
     * for each value of the first property with the value of the second property.
     * @namespace values
     */
    interface Values {
      /**
       * Executes a values query built by a {@link valuesBuilder} to read tuples
       * from the specified indexes for the documents qualified by the query.
       * @method values#read
       * @param {object} valuesQuery - a query built by a {@link valuesBuilder}
       * @returns {ResultProvider} an object whose result() function takes
       * a success callback that receives the tuples.
       */
      read(valuesQuery)
    }
  }
}
